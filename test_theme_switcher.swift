#!/usr/bin/env swift

import Foundation

// –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º
enum Theme: String {
    case light = "light"
    case dark = "dark"

    var iconName: String {
        switch self {
        case .light: return "üåû"
        case .dark: return "üåô"
        }
    }
}

class ThemeSwitcher {
    private var currentTheme: Theme = .light

    init() {
        setupCurrentTheme()
    }

    func setupCurrentTheme() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ defaults
        let process = Process()
        process.launchPath = "/usr/bin/defaults"
        process.arguments = ["read", "-g", "AppleInterfaceStyle"]

        let pipe = Pipe()
        process.standardOutput = pipe

        do {
            try process.run()
            process.waitUntilExit()

            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines)

            currentTheme = output == "Dark" ? .dark : .light
            print("–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(currentTheme.rawValue) \(currentTheme.iconName)")
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: \(error)")
        }
    }

    func toggleTheme() {
        let newTheme = currentTheme == .light ? Theme.dark : Theme.light
        print("–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞: \(newTheme.rawValue) \(newTheme.iconName)")

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É —á–µ—Ä–µ–∑ AppleScript
        let script = """
        tell application "System Events"
            tell appearance preferences
                set dark mode to \(newTheme == .dark ? "true" : "false")
            end tell
        end tell
        """

        let process = Process()
        process.launchPath = "/usr/bin/osascript"
        process.arguments = ["-e", script]

        do {
            try process.run()
            process.waitUntilExit()

            if process.terminationStatus == 0 {
                currentTheme = newTheme
                print("‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞!")
            } else {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã")
                showHelp()
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AppleScript: \(error)")
            showHelp()
        }
    }

    func showHelp() {
        print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("1. –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
        print("2. –ù–∞–π–¥–∏—Ç–µ ThemeSwitcher –∏ –¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
        print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: tccutil reset AppleEvents com.example.ThemeSwitcher")
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
let switcher = ThemeSwitcher()

print("üé® ThemeSwitcher - —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")
print("===================================")
print("–ö–æ–º–∞–Ω–¥—ã:")
print("  t - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
print("  s - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É")
print("  h - –ø–æ–º–æ—â—å")
print("  q - –≤—ã—Ö–æ–¥")
print("")

while true {
    print("> ", terminator: "")
    guard let input = readLine()?.trimmingCharacters(in: .whitespacesAndNewlines).lowercased() else {
        continue
    }

    switch input {
    case "t", "toggle":
        switcher.toggleTheme()
    case "s", "status":
        switcher.setupCurrentTheme()
    case "h", "help":
        print("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  t - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
        print("  s - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É")
        print("  q - –≤—ã—Ö–æ–¥")
    case "q", "quit", "exit":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        exit(0)
    default:
        print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'h' –¥–ª—è –ø–æ–º–æ—â–∏")
    }

    print("")
}
