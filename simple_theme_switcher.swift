#!/usr/bin/env swift
import Foundation
import AppKit

// MARK: - Extensions
extension Notification.Name {
    static let iconStyleChanged = Notification.Name("IconStyleChanged")
}

// MARK: - Icon Style
enum IconStyle: String, CaseIterable {
    case realistic = "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ"
    case monochrome = "–ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–µ"
    case minimal = "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ"
    case classic = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ"

    var description: String { rawValue }
}

// MARK: - Icon Set Manager
class IconSetManager {
    static let shared = IconSetManager()

    private init() {
        loadSettings()
    }

    var currentIconStyle: IconStyle = .realistic {
        didSet {
            saveSettings()
            NotificationCenter.default.post(name: .iconStyleChanged, object: nil)
        }
    }

    private func loadSettings() {
        if let savedStyle = UserDefaults.standard.string(forKey: "ThemeSwitcherIconStyle"),
           let style = IconStyle(rawValue: savedStyle) {
            currentIconStyle = style
        }
    }

    private func saveSettings() {
        UserDefaults.standard.set(currentIconStyle.rawValue, forKey: "ThemeSwitcherIconStyle")
        UserDefaults.standard.synchronize()
    }
}

// MARK: - Theme Manager
class ThemeManager {
    static let shared = ThemeManager()

    private init() {}

    func getCurrentTheme() -> String {
        if let appearance = NSApp?.effectiveAppearance {
            return appearance.name == .darkAqua ? "dark" : "light"
        }
        return "light"
    }

    func toggleTheme() {
        let script = "tell application \"System Events\" to tell appearance preferences to set dark mode to not dark mode"
        var error: NSDictionary?

        if let appleScript = NSAppleScript(source: script) {
            appleScript.executeAndReturnError(&error)
            if error != nil {
                print("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã!")
                print("üìù –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞:")
                print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
                print("   3. –ù–∞–π–¥–∏—Ç–µ ThemeSwitcher –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ 'System Events'")
                print("   4. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: tccutil reset AppleEvents")
                showPermissionsHelp()
            } else {
                print("‚úÖ –¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞!")
            }
        }
    }

    func showPermissionsHelp() {
        let alert = NSAlert()
        alert.messageText = "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã"
        alert.informativeText = """
        –ß—Ç–æ–±—ã ThemeSwitcher –º–æ–≥ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ç–µ–º—ã, –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.

        1. –û—Ç–∫—Ä–æ–π—Ç–µ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
        3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
        4. –í—ã–±–µ—Ä–∏—Ç–µ "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è" –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–≤–∞
        5. –ù–∞–π–¥–∏—Ç–µ ThemeSwitcher –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞–ø—Ä–æ—Ç–∏–≤ "System Events"

        –ò–ª–∏ –≤ Terminal –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
        tccutil reset AppleEvents

        –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ ThemeSwitcher.
        """
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }

    func createIcon(for theme: String, style: IconStyle = IconSetManager.shared.currentIconStyle) -> NSImage? {
        let size = NSSize(width: 18, height: 18)
        let image = NSImage(size: size)

        image.lockFocus()
        NSColor.clear.set()
        NSRect(origin: .zero, size: size).fill()

        switch style {
        case .realistic:
            drawRealisticIcon(theme: theme)
        case .monochrome:
            drawMonochromeIcon(theme: theme)
        case .minimal:
            drawMinimalIcon(theme: theme)
        case .classic:
            drawClassicIcon(theme: theme)
        }

        image.unlockFocus()
        image.isTemplate = false
        return image
    }

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ)
    private func drawRealisticIcon(theme: String) {
        if theme == "dark" {
            drawRealisticMoon()
        } else {
            drawRealisticSun()
        }
    }

    private func drawRealisticMoon() {
        let moonPath = NSBezierPath()
        moonPath.move(to: NSPoint(x: 9, y: 2))
        moonPath.curve(to: NSPoint(x: 9, y: 16),
                      controlPoint1: NSPoint(x: 16, y: 9),
                      controlPoint2: NSPoint(x: 16, y: 9))
        moonPath.curve(to: NSPoint(x: 9, y: 2),
                      controlPoint1: NSPoint(x: 2, y: 9),
                      controlPoint2: NSPoint(x: 2, y: 9))

        if let context = NSGraphicsContext.current?.cgContext {
            let gradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(),
                                    colors: [NSColor.white.cgColor,
                                            NSColor.lightGray.cgColor] as CFArray,
                                    locations: [0.0, 1.0])

            context.saveGState()
            moonPath.addClip()
            context.drawLinearGradient(gradient!,
                                     start: CGPoint(x: 9, y: 2),
                                     end: CGPoint(x: 9, y: 16),
                                     options: [])
            context.restoreGState()
        } else {
            NSColor.white.setFill()
            moonPath.fill()
        }
    }

    private func drawRealisticSun() {
        if let context = NSGraphicsContext.current?.cgContext {
            let sunGradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(),
                                       colors: [NSColor.yellow.cgColor,
                                               NSColor.orange.cgColor] as CFArray,
                                       locations: [0.0, 1.0])

            let sunPath = NSBezierPath(ovalIn: NSRect(x: 4, y: 4, width: 10, height: 10))

            context.saveGState()
            sunPath.addClip()
            context.drawRadialGradient(sunGradient!,
                                     startCenter: CGPoint(x: 9, y: 9),
                                     startRadius: 0,
                                     endCenter: CGPoint(x: 9, y: 9),
                                     endRadius: 5,
                                     options: [])
            context.restoreGState()

            // –õ—É—á–∏ —Å–æ–ª–Ω—Ü–∞
            let rayLengths = [3, 2, 3, 2, 3, 2, 3, 2]

            for i in 0..<8 {
                let angle = Double(i) * Double.pi / 4.0
                let rayLength = Double(rayLengths[i])
                let cosAngle = cos(angle)
                let sinAngle = sin(angle)

                let startPoint = NSPoint(x: 9 + cosAngle * 5, y: 9 + sinAngle * 5)
                let endDistance = 5 + rayLength
                let endPoint = NSPoint(x: 9 + cosAngle * endDistance, y: 9 + sinAngle * endDistance)

                let rayPath = NSBezierPath()
                rayPath.move(to: startPoint)
                rayPath.line(to: endPoint)
                rayPath.lineWidth = 1.5

                if let rayGradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(),
                                              colors: [NSColor.yellow.cgColor,
                                                      NSColor.orange.withAlphaComponent(0.5).cgColor] as CFArray,
                                              locations: [0.0, 1.0]) {
                    context.saveGState()
                    rayPath.addClip()
                    context.drawLinearGradient(rayGradient,
                                             start: startPoint,
                                             end: endPoint,
                                             options: [])
                    context.restoreGState()
                }
            }

            // –Ø—Ä–∫–æ–µ —è–¥—Ä–æ —Å–æ–ª–Ω—Ü–∞
            NSColor.white.setFill()
            let corePath = NSBezierPath(ovalIn: NSRect(x: 7, y: 7, width: 4, height: 4))
            corePath.fill()
        }
    }

    // –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ (—á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ, –ø–ª–æ—Å–∫–∏–µ)
    private func drawMonochromeIcon(theme: String) {
        if theme == "dark" {
            NSColor.black.setFill()
            let moonPath = NSBezierPath()
            moonPath.move(to: NSPoint(x: 9, y: 3))
            moonPath.curve(to: NSPoint(x: 9, y: 15),
                          controlPoint1: NSPoint(x: 15, y: 9),
                          controlPoint2: NSPoint(x: 15, y: 9))
            moonPath.curve(to: NSPoint(x: 9, y: 3),
                          controlPoint1: NSPoint(x: 3, y: 9),
                          controlPoint2: NSPoint(x: 3, y: 9))
            moonPath.fill()
        } else {
            NSColor.black.setFill()
            let sunPath = NSBezierPath(ovalIn: NSRect(x: 5, y: 5, width: 8, height: 8))
            sunPath.fill()

            // –ü—Ä–æ—Å—Ç—ã–µ –ª—É—á–∏
            for i in 0..<8 {
                let angle = Double(i) * Double.pi / 4.0
                let startPoint = NSPoint(x: 9 + cos(angle) * 4, y: 9 + sin(angle) * 4)
                let endPoint = NSPoint(x: 9 + cos(angle) * 6, y: 9 + sin(angle) * 6)

                let rayPath = NSBezierPath()
                rayPath.move(to: startPoint)
                rayPath.line(to: endPoint)
                rayPath.lineWidth = 1.0
                rayPath.stroke()
            }
        }
    }

    // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ (–ø—Ä–æ—Å—Ç—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ)
    private func drawMinimalIcon(theme: String) {
        if theme == "dark" {
            NSColor.black.setFill()
            let moonPath = NSBezierPath(ovalIn: NSRect(x: 6, y: 6, width: 6, height: 6))
            moonPath.fill()
            // –ú–∞–ª–µ–Ω—å–∫–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã
            let phasePath = NSBezierPath(ovalIn: NSRect(x: 8, y: 8, width: 2, height: 2))
            NSColor.white.setFill()
            phasePath.fill()
        } else {
            NSColor.black.setFill()
            let sunPath = NSBezierPath(ovalIn: NSRect(x: 6, y: 6, width: 6, height: 6))
            sunPath.fill()
            // 4 –ø—Ä–æ—Å—Ç—ã—Ö –ª—É—á–∞
            for i in 0..<4 {
                let angle = Double(i) * Double.pi / 2.0
                let startPoint = NSPoint(x: 9 + cos(angle) * 3, y: 9 + sin(angle) * 3)
                let endPoint = NSPoint(x: 9 + cos(angle) * 5, y: 9 + sin(angle) * 5)

                let rayPath = NSBezierPath()
                rayPath.move(to: startPoint)
                rayPath.line(to: endPoint)
                rayPath.lineWidth = 1.0
                rayPath.stroke()
            }
        }
    }

    // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏–∫–æ–Ω–∫–∏ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
    private func drawClassicIcon(theme: String) {
        if theme == "dark" {
            NSColor.black.setFill()
            // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª –ø–æ–ª—É–º–µ—Å—è—Ü–∞
            let moonPath = NSBezierPath()
            moonPath.appendArc(withCenter: NSPoint(x: 9, y: 9), radius: 6, startAngle: -90, endAngle: 90)
            moonPath.appendArc(withCenter: NSPoint(x: 12, y: 9), radius: 3, startAngle: 90, endAngle: -90, clockwise: true)
            moonPath.fill()
        } else {
            NSColor.black.setFill()
            // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª —Å–æ–ª–Ω—Ü–∞ —Å –∫—Ä—É–≥–∞–º–∏
            let sunPath = NSBezierPath(ovalIn: NSRect(x: 6, y: 6, width: 6, height: 6))
            sunPath.fill()

            // –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä—É–≥–∏ –¥–ª—è –ª—É—á–µ–π
            NSColor.black.setStroke()
            for radius in [7, 8] {
                let circlePath = NSBezierPath(ovalIn: NSRect(x: 9 - radius, y: 9 - radius, width: radius * 2, height: radius * 2))
                circlePath.lineWidth = 0.5
                circlePath.stroke()
            }
        }
    }
}

// MARK: - Settings Window
class SettingsWindowController: NSWindowController, NSTableViewDataSource, NSTableViewDelegate {
    private var tableView: NSTableView!
    private let iconStyles = IconStyle.allCases

    override func loadWindow() {
        print("üñºÔ∏è SettingsWindowController loadWindow() –≤—ã–∑–≤–∞–Ω")
        let window = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 300, height: 250),
            styleMask: [.titled, .closable, .resizable],
            backing: .buffered,
            defer: false
        )
        window.title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ThemeSwitcher"
        window.center()
        print("üìè –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")

        let contentView = NSView(frame: window.contentRect(forFrameRect: window.frame))
        print("üìã ContentView —Å–æ–∑–¥–∞–Ω")

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        let titleLabel = NSTextField(labelWithString: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∫–æ–Ω–æ–∫:")
        titleLabel.frame = NSRect(x: 20, y: 200, width: 260, height: 20)
        titleLabel.font = NSFont.systemFont(ofSize: 14, weight: .medium)
        contentView.addSubview(titleLabel)

        // –¢–∞–±–ª–∏—Ü–∞
        let scrollView = NSScrollView(frame: NSRect(x: 20, y: 50, width: 260, height: 140))
        tableView = NSTableView(frame: scrollView.bounds)

        let column = NSTableColumn(identifier: NSUserInterfaceItemIdentifier("IconStyle"))
        column.title = "–°—Ç–∏–ª—å –∏–∫–æ–Ω–æ–∫"
        column.width = 240
        tableView.addTableColumn(column)

        tableView.dataSource = self
        tableView.delegate = self
        tableView.selectionHighlightStyle = .regular
        tableView.allowsMultipleSelection = false

        scrollView.documentView = tableView
        scrollView.hasVerticalScroller = true
        contentView.addSubview(scrollView)

        // –ö–Ω–æ–ø–∫–∞ OK
        let okButton = NSButton(title: "OK", target: self, action: #selector(okButtonClicked))
        okButton.frame = NSRect(x: 200, y: 10, width: 80, height: 30)
        okButton.bezelStyle = .rounded
        contentView.addSubview(okButton)

        // –í—ã–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å
        let currentStyleIndex = iconStyles.firstIndex(of: IconSetManager.shared.currentIconStyle) ?? 0
        tableView.selectRowIndexes(IndexSet(integer: currentStyleIndex), byExtendingSelection: false)

        window.contentView = contentView
        self.window = window
        print("‚úÖ SettingsWindowController loadWindow() –∑–∞–≤–µ—Ä—à–µ–Ω")
    }

    // MARK: - NSTableView DataSource & Delegate
    func numberOfRows(in tableView: NSTableView) -> Int {
        return iconStyles.count
    }

    func tableView(_ tableView: NSTableView, objectValueFor tableColumn: NSTableColumn?, row: Int) -> Any? {
        let style = iconStyles[row]
        let currentStyle = IconSetManager.shared.currentIconStyle

        let attributedString = NSMutableAttributedString(string: style.description)
        if style == currentStyle {
            attributedString.addAttribute(.foregroundColor, value: NSColor.systemBlue, range: NSRange(location: 0, length: attributedString.length))
            attributedString.addAttribute(.font, value: NSFont.systemFont(ofSize: 13, weight: .medium), range: NSRange(location: 0, length: attributedString.length))
        }

        return attributedString
    }

    func tableViewSelectionDidChange(_ notification: Notification) {
        let selectedRow = tableView.selectedRow
        if selectedRow >= 0 && selectedRow < iconStyles.count {
            let selectedStyle = iconStyles[selectedRow]
            IconSetManager.shared.currentIconStyle = selectedStyle
        }
    }

    @objc private func okButtonClicked() {
        window?.close()
    }
}

// MARK: - Status Bar Controller
class StatusBarController {
    private var statusItem: NSStatusItem!
    private let themeManager = ThemeManager.shared
    private var settingsWindowController: SettingsWindowController?
    private var contextMenu: NSMenu!

    init() {
        setupStatusBar()
        setupIconStyleObserver()
    }

    private func setupStatusBar() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)

        if let button = statusItem.button {
            button.image = themeManager.createIcon(for: themeManager.getCurrentTheme())
            button.image?.size = NSSize(width: 18, height: 18)
            button.action = #selector(leftClickAction)
            button.target = self
            button.toolTip = "Theme Switcher - Left: toggle theme, Cmd+Left: settings, Double-click/Shift+Left/Ctrl+Left: menu"
        }

        setupMenu()
        setupObserver()
        setupRightClickGesture()
        setupIconStyleObserver()
        updateIcon()

        // –ù–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–ª–∞
        // –ú–µ–Ω—é –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫–ª–∏–∫—É
    }

    private func setupMenu() {
        let menu = NSMenu()

        let toggleItem = NSMenuItem(title: "üé® –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", action: #selector(toggleThemeAction), keyEquivalent: "")
        toggleItem.target = self
        menu.addItem(toggleItem)

        menu.addItem(NSMenuItem.separator())

        let currentTheme = themeManager.getCurrentTheme()
        let themeInfo = NSMenuItem(title: "–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(currentTheme == "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è")", action: nil, keyEquivalent: "")
        themeInfo.isEnabled = false
        menu.addItem(themeInfo)

        menu.addItem(NSMenuItem.separator())

        let permissionsItem = NSMenuItem(title: "üîë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞", action: #selector(checkPermissionsAction), keyEquivalent: "")
        permissionsItem.target = self
        menu.addItem(permissionsItem)

        let helpItem = NSMenuItem(title: "‚ùì –ü–æ–º–æ—â—å —Å –ø—Ä–∞–≤–∞–º–∏", action: #selector(showHelpAction), keyEquivalent: "")
        helpItem.target = self
        menu.addItem(helpItem)

        menu.addItem(NSMenuItem.separator())

        menu.addItem(NSMenuItem.separator())

        let settingsItem = NSMenuItem(title: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", action: #selector(showSettingsAction), keyEquivalent: ",")
        settingsItem.target = self
        menu.addItem(settingsItem)

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        let settingsAltItem = NSMenuItem(title: "üé® –°—Ç–∏–ª–∏ –∏–∫–æ–Ω–æ–∫", action: #selector(showSettingsAction), keyEquivalent: "")
        settingsAltItem.target = self
        menu.addItem(settingsAltItem)

        let quitItem = NSMenuItem(title: "üö™ –í—ã—Ö–æ–¥", action: #selector(quitAction), keyEquivalent: "q")
        quitItem.target = self
        menu.addItem(quitItem)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫–ª–∏–∫—É
        contextMenu = menu
    }

    private func setupObserver() {
        DistributedNotificationCenter.default().addObserver(
            self,
            selector: #selector(themeChanged),
            name: Notification.Name("AppleInterfaceThemeChangedNotification"),
            object: nil
        )
    }

    private func setupRightClickGesture() {
        // –ü–æ—Å–∫–æ–ª—å–∫—É NSClickGestureRecognizer —Å buttonMask 0x2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ,
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã: –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –∏ Shift+–∫–ª–∏–∫
        print("üéõÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é...")

        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
        let doubleClickRecognizer = NSClickGestureRecognizer(target: self, action: #selector(rightClickAction(_:)))
        doubleClickRecognizer.buttonMask = 0x1 // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        doubleClickRecognizer.numberOfClicksRequired = 2 // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
        statusItem.button?.addGestureRecognizer(doubleClickRecognizer)
        print("‚úÖ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        // Shift + –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
        let shiftClickRecognizer = NSClickGestureRecognizer(target: self, action: #selector(rightClickAction(_:)))
        shiftClickRecognizer.buttonMask = 0x1 // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        shiftClickRecognizer.numberOfClicksRequired = 1 // –û–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª–∏–∫
        statusItem.button?.addGestureRecognizer(shiftClickRecognizer)
        print("‚úÖ Shift + –∫–ª–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    }

    @objc private func leftClickAction() {
        print("üñ±Ô∏è leftClickAction –≤—ã–∑–≤–∞–Ω")
        // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        // –ï—Å–ª–∏ –∑–∞–∂–∞—Ç—å Cmd, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        // –ï—Å–ª–∏ –∑–∞–∂–∞—Ç—å Ctrl, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        // –ï—Å–ª–∏ –∑–∞–∂–∞—Ç—å Shift, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        let event = NSApp.currentEvent
        let modifierFlags = event?.modifierFlags ?? []
        print("üîë –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: \(modifierFlags)")

        if modifierFlags.contains(.command) {
            print("‚åò Cmd –Ω–∞–∂–∞—Ç - –æ—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            showSettingsAction()
        } else if modifierFlags.contains(.control) {
            print("‚åÉ Ctrl –Ω–∞–∂–∞—Ç - –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é")
            rightClickAction(NSClickGestureRecognizer())
        } else if modifierFlags.contains(.shift) {
            print("‚áß Shift –Ω–∞–∂–∞—Ç - –æ—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é")
            rightClickAction(NSClickGestureRecognizer())
        } else {
            print("üîÑ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–∞—é —Ç–µ–º—É")
            themeManager.toggleTheme()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.updateMenu()
            }
        }
    }

    @objc private func rightClickAction(_ sender: NSClickGestureRecognizer) {
        // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        updateMenu()
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        let event = NSApp.currentEvent
        let point = statusItem.button?.convert(event?.locationInWindow ?? .zero, from: nil) ?? .zero

        // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
        if let button = statusItem.button {
            // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ NSMenu.popUp
            contextMenu.popUp(positioning: nil, at: point, in: button)
        }
    }

    @objc private func toggleThemeAction() {
        // –î–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
        themeManager.toggleTheme()
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.updateMenu()
        }
    }

    @objc private func checkPermissionsAction() {
        let script = "tell application \"System Events\" to tell appearance preferences to get dark mode"
        var error: NSDictionary?

        if let appleScript = NSAppleScript(source: script) {
            appleScript.executeAndReturnError(&error)
            if error != nil {
                showPermissionsAlert("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", "ThemeSwitcher –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            } else {
                showPermissionsAlert("‚úÖ –ü—Ä–∞–≤–∞ –µ—Å—Ç—å", "ThemeSwitcher –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
            }
        }
    }

    @objc private func showHelpAction() {
        themeManager.showPermissionsHelp()
    }

    @objc private func showSettingsAction() {
        print("üéõÔ∏è showSettingsAction –≤—ã–∑–≤–∞–Ω")

        DispatchQueue.main.async {
            if self.settingsWindowController == nil {
                print("üìÇ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π SettingsWindowController")
                self.settingsWindowController = SettingsWindowController()
                print("üìÇ SettingsWindowController —Å–æ–∑–¥–∞–Ω")
            }

            print("üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—é –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            self.settingsWindowController?.showWindow(nil)

            // –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –∫–ª—é—á–µ–≤—ã–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if let window = self.settingsWindowController?.window {
                print("üîë –î–µ–ª–∞—é –æ–∫–Ω–æ –∫–ª—é—á–µ–≤—ã–º")
                window.makeKeyAndOrderFront(nil)
                NSApp.activate(ignoringOtherApps: true)
                print("‚úÖ –û–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ")
            } else {
                print("‚ùå –û—à–∏–±–∫–∞: –æ–∫–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            }
        }
    }

    private func setupIconStyleObserver() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(iconStyleChanged),
            name: .iconStyleChanged,
            object: nil
        )
    }

    @objc private func iconStyleChanged() {
        updateIcon()
    }

    func showPermissionsAlert(_ title: String, _ message: String) {
        let alert = NSAlert()
        alert.messageText = title
        alert.informativeText = message
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }

    @objc private func themeChanged() {
        updateIcon()
        updateMenu()
    }

    private func updateIcon() {
        let currentTheme = themeManager.getCurrentTheme()
        let currentStyle = IconSetManager.shared.currentIconStyle
        if let button = statusItem.button {
            button.image = themeManager.createIcon(for: currentTheme, style: currentStyle)
        }
        updateMenu()
    }

    private func updateMenu() {
        let currentTheme = themeManager.getCurrentTheme()
        let currentStyle = IconSetManager.shared.currentIconStyle
        let themeInfoTitle = "–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(currentTheme == "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è") (\(currentStyle.description))"

        for menuItem in contextMenu.items {
            if menuItem.isEnabled == false && menuItem.title.contains("–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞") {
                menuItem.title = themeInfoTitle
                break
            }
        }
    }

    @objc private func quitAction() {
        NSApplication.shared.terminate(self)
    }
}

// MARK: - App Delegate
class AppDelegate: NSObject, NSApplicationDelegate {
    var statusBarController: StatusBarController?

    func applicationDidFinishLaunching(_ notification: Notification) {
        NSApp.setActivationPolicy(.accessory)
        statusBarController = StatusBarController()
        print("ThemeSwitcher –∑–∞–ø—É—â–µ–Ω! –ò–∫–æ–Ω–∫–∞ –≤ –º–µ–Ω—é –±–∞—Ä–µ.")
    }
}

// MARK: - Main
func main() {
    let app = NSApplication.shared
    let delegate = AppDelegate()
    app.delegate = delegate
    app.run()
}

main()
