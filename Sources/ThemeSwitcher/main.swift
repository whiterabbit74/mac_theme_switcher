import Foundation
import AppKit

// MARK: - Theme Manager
class ThemeManager {
    static let shared = ThemeManager()

    private init() {}

    func getCurrentTheme() -> String {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º NSAppearance –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
        if let appearance = NSApp?.effectiveAppearance {
            return appearance.name == .darkAqua ? "dark" : "light"
        }

        // Fallback –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–≥–¥–∞ NSApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if #available(macOS 10.14, *) {
            return NSAppearance.currentDrawing().name == .darkAqua ? "dark" : "light"
        }

        return "light" // fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    func toggleTheme() {
        let script = "tell application \"System Events\" to tell appearance preferences to set dark mode to not dark mode"
        var error: NSDictionary?

        if let appleScript = NSAppleScript(source: script) {
            appleScript.executeAndReturnError(&error)
            if error != nil {
                print("Error toggling theme: \(error!)")
            } else {
                print("Theme toggled successfully")
            }
        } else {
            print("Failed to create AppleScript")
        }
    }

    func createIcon(for theme: String) -> NSImage? {
        let size = NSSize(width: 18, height: 18)
        let image = NSImage(size: size)

        image.lockFocus()

        // –û—á–∏—â–∞–µ–º —Ñ–æ–Ω
        NSColor.clear.set()
        NSRect(origin: .zero, size: size).fill()

        // –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É
        let context = NSGraphicsContext.current?.cgContext
        context?.setLineWidth(2.0)
        context?.setLineCap(.round)

        if theme == "dark" {
            // –õ—É–Ω–∞ –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
            NSColor.white.set()
            let moonPath = NSBezierPath()
            moonPath.appendArc(withCenter: NSPoint(x: 9, y: 9), radius: 7, startAngle: -90, endAngle: 270)
            moonPath.appendArc(withCenter: NSPoint(x: 12, y: 6), radius: 4, startAngle: 90, endAngle: 270, clockwise: true)
            moonPath.fill()
        } else {
            // –°–æ–ª–Ω—Ü–µ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            NSColor.yellow.set()
            let sunPath = NSBezierPath()
            sunPath.appendArc(withCenter: NSPoint(x: 9, y: 9), radius: 6, startAngle: 0, endAngle: 360)

            // –õ—É—á–∏ —Å–æ–ª–Ω—Ü–∞
            for i in 0..<8 {
                let angle = Double(i) * Double.pi / 4.0
                let startPoint = NSPoint(
                    x: 9 + cos(angle) * 7,
                    y: 9 + sin(angle) * 7
                )
                let endPoint = NSPoint(
                    x: 9 + cos(angle) * 9,
                    y: 9 + sin(angle) * 9
                )

                let rayPath = NSBezierPath()
                rayPath.move(to: startPoint)
                rayPath.line(to: endPoint)
                rayPath.stroke()
            }

            sunPath.fill()
        }

        image.unlockFocus()
        image.isTemplate = false
        return image
    }
}

// MARK: - Settings Window Controller
class SettingsWindowController: NSWindowController {

    convenience init() {
        let window = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 400, height: 300),
            styleMask: [.titled, .closable, .miniaturizable],
            backing: .buffered,
            defer: false
        )

        window.title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ThemeSwitcher"
        window.center()
        window.isReleasedWhenClosed = false

        self.init(window: window)
        setupSettingsView()
    }

    private func setupSettingsView() {
        guard let window = window else { return }

        let contentView = NSView(frame: window.contentView?.bounds ?? NSRect.zero)
        contentView.wantsLayer = true

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        let titleLabel = NSTextField(labelWithString: "ThemeSwitcher –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        titleLabel.font = NSFont.boldSystemFont(ofSize: 16)
        titleLabel.alignment = .center
        titleLabel.frame = NSRect(x: 20, y: 240, width: 360, height: 30)
        contentView.addSubview(titleLabel)

        // –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        let descriptionLabel = NSTextField(wrappingLabelWithString: "–õ–µ–≤—ã–π –∫–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ –≤ –º–µ–Ω—é - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã\n–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ - –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ –º–µ–Ω—é")
        descriptionLabel.font = NSFont.systemFont(ofSize: 12)
        descriptionLabel.alignment = .center
        descriptionLabel.frame = NSRect(x: 20, y: 180, width: 360, height: 40)
        contentView.addSubview(descriptionLabel)

        // –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞
        let currentTheme = ThemeManager.shared.getCurrentTheme()
        let themeLabel = NSTextField(labelWithString: "–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(currentTheme == "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è")")
        themeLabel.font = NSFont.systemFont(ofSize: 14)
        themeLabel.alignment = .center
        themeLabel.frame = NSRect(x: 20, y: 130, width: 360, height: 25)
        contentView.addSubview(themeLabel)

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        let toggleButton = NSButton(frame: NSRect(x: 150, y: 90, width: 100, height: 30))
        toggleButton.title = "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å"
        toggleButton.bezelStyle = .rounded
        toggleButton.target = self
        toggleButton.action = #selector(toggleThemeFromSettings)
        contentView.addSubview(toggleButton)

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        let versionLabel = NSTextField(labelWithString: "ThemeSwitcher v1.0")
        versionLabel.font = NSFont.systemFont(ofSize: 10)
        versionLabel.textColor = .secondaryLabelColor
        versionLabel.alignment = .center
        versionLabel.frame = NSRect(x: 20, y: 20, width: 360, height: 15)
        contentView.addSubview(versionLabel)

        window.contentView = contentView
    }

    @objc private func toggleThemeFromSettings() {
        ThemeManager.shared.toggleTheme()
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –æ–∫–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.updateThemeDisplay()
        }
    }

    private func updateThemeDisplay() {
        guard let contentView = window?.contentView else { return }

        // –ù–∞—Ö–æ–¥–∏–º label —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–æ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        for subview in contentView.subviews {
            if let label = subview as? NSTextField,
               label.stringValue.contains("–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞:") {
                let currentTheme = ThemeManager.shared.getCurrentTheme()
                label.stringValue = "–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(currentTheme == "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è")"
                break
            }
        }
    }
}

// MARK: - Status Bar Controller
class StatusBarController {
    private var statusItem: NSStatusItem!
    private let themeManager = ThemeManager.shared
    private var settingsWindowController: SettingsWindowController?

    init() {
        setupStatusBar()
    }

    private func setupStatusBar() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)

        if let button = statusItem.button {
            button.image = themeManager.createIcon(for: themeManager.getCurrentTheme())
            button.image?.size = NSSize(width: 18, height: 18)
            button.action = #selector(leftClickAction)
            button.target = self
            button.toolTip = "ThemeSwitcher - –õ–µ–≤—ã–π –∫–ª–∏–∫: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É, –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–∫–æ–≤
            button.sendAction(on: [.leftMouseUp, .rightMouseUp])
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞
        let rightClickRecognizer = NSClickGestureRecognizer(target: self, action: #selector(rightClickAction(_:)))
        rightClickRecognizer.buttonMask = 0x2 // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫
        rightClickRecognizer.numberOfClicksRequired = 1
        statusItem.button?.addGestureRecognizer(rightClickRecognizer)

        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–µ–º—ã
        DistributedNotificationCenter.default().addObserver(
            self,
            selector: #selector(themeChanged),
            name: Notification.Name("AppleInterfaceThemeChangedNotification"),
            object: nil
        )

        updateIcon()
    }

    private func createRightClickMenu() -> NSMenu {
        let menu = NSMenu()

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        let currentTheme = themeManager.getCurrentTheme()
        let themeInfo = NSMenuItem(title: "–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: \(currentTheme == "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è")", action: nil, keyEquivalent: "")
        themeInfo.isEnabled = false
        menu.addItem(themeInfo)

        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        menu.addItem(NSMenuItem.separator())

        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
        let toggleItem = NSMenuItem(title: "üé® –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", action: #selector(toggleThemeAction), keyEquivalent: "")
        toggleItem.target = self
        menu.addItem(toggleItem)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        let settingsItem = NSMenuItem(title: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏...", action: #selector(showSettingsAction), keyEquivalent: "")
        settingsItem.target = self
        menu.addItem(settingsItem)

        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        menu.addItem(NSMenuItem.separator())

        // –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        let aboutItem = NSMenuItem(title: "‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", action: #selector(showAboutAction), keyEquivalent: "")
        aboutItem.target = self
        menu.addItem(aboutItem)

        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        menu.addItem(NSMenuItem.separator())

        // –í—ã—Ö–æ–¥
        let quitItem = NSMenuItem(title: "‚ùå –í—ã—Ö–æ–¥", action: #selector(quitAction), keyEquivalent: "q")
        quitItem.target = self
        menu.addItem(quitItem)

        return menu
    }

    @objc private func leftClickAction() {
        // –õ–µ–≤—ã–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
        let event = NSApp.currentEvent
        if event?.type == .leftMouseUp {
            print("–õ–µ–≤—ã–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã")
            themeManager.toggleTheme()
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                self.updateIcon()
            }
        }
    }

    @objc private func toggleThemeAction() {
        themeManager.toggleTheme()
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.updateIcon()
        }
    }

    @objc private func themeChanged() {
        updateIcon()
    }

    private func updateIcon() {
        let currentTheme = themeManager.getCurrentTheme()
        if let button = statusItem.button {
            button.image = themeManager.createIcon(for: currentTheme)
        }
    }


    @objc private func rightClickAction(_ sender: NSClickGestureRecognizer) {
        print("–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –ø–æ–∫–∞–∑ –º–µ–Ω—é")
        // –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞
        let menu = createRightClickMenu()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å –∞–π—Ç–µ–º–∞
        let event = NSApp.currentEvent
        let point = statusItem.button?.convert(event?.locationInWindow ?? .zero, from: nil) ?? .zero
        menu.popUp(positioning: nil, at: point, in: statusItem.button)
    }

    @objc private func showSettingsAction() {
        if settingsWindowController == nil {
            settingsWindowController = SettingsWindowController()
        }

        settingsWindowController?.window?.makeKeyAndOrderFront(nil)
        NSApp.activate(ignoringOtherApps: true)
    }

    @objc private func showAboutAction() {
        let alert = NSAlert()
        alert.messageText = "ThemeSwitcher"
        alert.informativeText = "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã macOS\n\n–í–µ—Ä—Å–∏—è: 1.0\n\n–õ–µ–≤—ã–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã\n–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        alert.alertStyle = .informational
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }

    @objc private func quitAction() {
        NSApplication.shared.terminate(self)
    }
}

// MARK: - App Delegate
class AppDelegate: NSObject, NSApplicationDelegate {
    var statusBarController: StatusBarController?

    func applicationDidFinishLaunching(_ notification: Notification) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Dock
        NSApp.setActivationPolicy(.accessory)

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        statusBarController = StatusBarController()

        print("ThemeSwitcher –∑–∞–ø—É—â–µ–Ω! –ò–∫–æ–Ω–∫–∞ –≤ –º–µ–Ω—é –±–∞—Ä–µ.")
        print("–ù–∞–∂–º–∏—Ç–µ Cmd+Q –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
    }

    func applicationWillTerminate(_ notification: Notification) {
        print("ThemeSwitcher –∑–∞–≤–µ—Ä—à—ë–Ω.")
    }
}

// MARK: - Main Function
func main() {
    let app = NSApplication.shared
    let delegate = AppDelegate()
    app.delegate = delegate

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run()
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main()
